import requests
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import MaxNLocator

# Parameters
min_price = 0.04
max_price = 0.4

# Step 1: Make a REST request to the Xeggex API
url = "https://xeggex.com/api/v2/market/getorderbookbysymbol/ETI_USDT"
response = requests.get(url)
data = response.json()

if "bids" in data and "asks" in data:
    buy_orders = data["bids"]
    sell_orders = data["asks"]
else:
    print("API request failed.")
    exit()

# Step 2: Process the data using pandas
buy_df = pd.DataFrame(buy_orders, columns=["price", "quantity"])
sell_df = pd.DataFrame(sell_orders, columns=["price", "quantity"])

# Convert price and quantity columns to appropriate data types
buy_df["price"] = buy_df["price"].astype(float)
buy_df["quantity"] = buy_df["quantity"].astype(float)
sell_df["price"] = sell_df["price"].astype(float)
sell_df["quantity"] = sell_df["quantity"].astype(float)

# Filter out orders with prices outside the specified range
buy_df = buy_df[(buy_df["price"] >= min_price) & (buy_df["price"] <= max_price)]
sell_df = sell_df[(sell_df["price"] >= min_price) & (sell_df["price"] <= max_price)]

# Calculate the complementary ECDF for bids
buy_df["Complementary Quantity"] = buy_df["quantity"][::-1].cumsum()[::-1]

# Add a "side" column to distinguish between buy and sell orders
buy_df["side"] = "Buy"
sell_df["side"] = "Sell"

# Step 3: Create a Weighted empirical CDF (ECDF) plot
fig, ax = plt.subplots()

sns.ecdfplot(x="price", weights="Complementary Quantity", stat="count", complementary=True, data=buy_df, ax=ax)
sns.ecdfplot(x="price", weights="quantity", stat="count", data=sell_df, ax=ax)
sns.scatterplot(x="price", y="quantity", hue="side", data=pd.concat([buy_df, sell_df]), ax=ax)

ax.set_title("Depth Chart")
ax.set_xlabel("Price per ETI")
ax.set_ylabel("Quantity of ETI")

# Customize the number of ticks on the price axis
ax.xaxis.set_major_locator(MaxNLocator(nbins=15))  # Adjust the number of bins as needed

plt.show()
